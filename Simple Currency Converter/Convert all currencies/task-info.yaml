type: remote_edu
files:
- name: main.js
  visible: true
  text: //Write your code here
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, dynamic_test, TestedProgram


    class CurrencyConverter(StageTest):
        test_amounts = ["1", "3", "18", "50", "115"]
        usd = 1.0
        jpy = 113.50
        eur = 0.89
        rub = 74.36
        gbp = 0.75
        currencies = {"JPY": jpy, "EUR": eur, "RUB": rub, "GBP": gbp, "USD": usd}
        known_currencies = list(currencies.keys())
        test_data = []

        for i in range(0, len(test_amounts)):
            for j in range(0, len(known_currencies)):
                test_data.append([test_amounts[i], known_currencies[j], known_currencies[len(known_currencies) - 1 - j]])

        def convert_currency(self, amount, _from, to):
            _from = _from.upper()
            to = to.upper()
            result = int(amount) * self.currencies[to] / self.currencies[_from]
            format_result = "{:.4f}".format(result)
            return f"Result: {amount} {_from} equals {format_result} {to}"

        @dynamic_test
        def test1(self):
            main = TestedProgram()
            output = main.start()
            message = """Welcome to Currency Converter!
    1 USD equals 1 USD
    1 USD equals 113.5 JPY
    1 USD equals 0.89 EUR
    1 USD equals 74.36 RUB
    1 USD equals 0.75 GBP
    What do you want to convert?
    From:"""
            if message not in output.strip():
                return CheckResult.wrong('Your output should be like in the example!')
            return CheckResult.correct()

        @dynamic_test(data=test_data)
        def test2(self, amounts, from_currency, to_currency):
            main = TestedProgram()
            main.start()
            if main.is_waiting_input():
                output = main.execute(from_currency)
                message = "To:"
                if message not in output.strip():
                    return CheckResult.wrong('You should ask for the "To" currency input!')
                output = main.execute(to_currency)
                message = "Amount:"
                if message not in output.strip():
                    return CheckResult.wrong('You should ask for the "Amount" input!')
                output = main.execute(amounts)
                if self.convert_currency(amounts, from_currency, to_currency) not in output.strip():
                    return CheckResult.wrong('You should output the correct result as in the example!')
                return CheckResult.correct()

            return CheckResult.wrong('You should ask for the "From" currency input!')

        @dynamic_test()
        def test3(self):
            main = TestedProgram()
            main.start()
            if main.is_waiting_input():
                output = main.execute("TL")
                message = "Unknown currency"
                if message not in output.strip():
                    return CheckResult.wrong('You should output the correct message if an unknown input occurs.')
                elif not main.is_finished():
                    return CheckResult.wrong('The program should finish if an unknown input occurs.')
                return CheckResult.correct()
            return CheckResult.wrong('You should ask for the "From" currency input!')

        @dynamic_test()
        def test4(self):
            main = TestedProgram()
            main.start()
            if main.is_waiting_input():
                main.execute("USD")
                output = main.execute("This is a currency, believe me!")
                message = "Unknown currency"
                if message not in output.strip():
                    return CheckResult.wrong('You should output the correct message if an unknown input occurs.')
                elif not main.is_finished():
                    return CheckResult.wrong('The program should finish if an unknown input occurs.')
                return CheckResult.correct()
            return CheckResult.wrong('You should ask for the "To" currency input!')

        @dynamic_test(data=["-1", "a"])
        def test5(self, amount):
            main = TestedProgram()
            main.start()
            if main.is_waiting_input():
                main.execute("USD")
                main.execute("GBP")

                output = main.execute(amount)
                message = "The amount cannot be less than 1"
                message2 = "The amount has to be a number"
                if amount == "-1" and message not in output.strip():
                    return CheckResult.wrong('You should output the correct message if a negative amount is given.')
                elif amount == "a" and message2 not in output.strip():
                    return CheckResult.wrong('You should output the correct message if a non-numeric amount is given.')
                elif not main.is_finished():
                    return CheckResult.wrong('The program should finish if a negative or non-numeric input is given.')
                return CheckResult.correct()

            return CheckResult.wrong('You should ask for the "To" currency input!')

        @dynamic_test(data=["JpY", "jpy"])
        def test6(self, currency):
            main = TestedProgram()
            main.start()
            if main.is_waiting_input():
                output = main.execute(currency)
                message = "To:"
                if message not in output.strip():
                    return CheckResult.wrong('Your program should not be case sensitive!')

                output = main.execute(currency)
                message = "Amount:"
                if message not in output.strip():
                    return CheckResult.wrong('Your program should not be case sensitive!')
                output = main.execute(self.test_amounts[1])
                if self.convert_currency(self.test_amounts[1], currency, currency) not in output.strip():
                    return CheckResult.wrong('You should output the correct result as in the example!')
                return CheckResult.correct()

            return CheckResult.wrong('You should ask for the "From" currency input!')


    if __name__ == '__main__':
        CurrencyConverter('main').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/17899#comment
check_profile: hyperskill_node_javascript
status: Solved
feedback:
  message: <html>Correct solution</html>
  time: Sat, 03 Sep 2022 13:09:05 UTC
record: 3
